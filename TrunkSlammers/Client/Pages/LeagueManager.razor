
@page "/data/leagues"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TrunkSlammers.Shared
@using Newtonsoft.Json
@using System.Text;


@inject HttpClient Http

@if (leagues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <h2> Leagues you are in</h2>
    </AuthorizeView>

    <RadzenGrid @ref="leaguesGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@leagues" TItem="League" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenGridColumn Width="100px" TItem="League" Property="Id" Title="ID">
            </RadzenGridColumn>

            <RadzenGridColumn TItem="League" Property="Name" Title="Name">
                <EditTemplate Context="league">
                    <RadzenTextBox @bind-Value="league.Name" Style="width:100%; display: block" Name="LeagueName" />
                    <RadzenRequiredValidator Text="League name is required" Component="LeagueName" Popup="true" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="League" Context="sampleBlazorModelsSampleOrder" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="league">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(league))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="league">
                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(league))">
                    </RadzenButton>
                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(league))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="League" Context="league" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                <Template Context="league">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(league))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="league">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(league))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add League" Click="@InsertRow" />

}

@code {
    private IList<League> leagues;
    RadzenGrid<League> leaguesGrid;
    string leagueNameBeforeEdit;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        try
        {
            leagues = await Http.GetFromJsonAsync<IList<League>>("api/League/GetAllLeagues");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void EditRow(League selectedLeague)
    {
        leaguesGrid.EditRow(selectedLeague);
        leagueNameBeforeEdit = selectedLeague.Name;
    }

    async Task OnUpdateRow(League selectedLeague)
    {
        await Http.PostAsync("api/League/EditLeagueName", new StringContent(JsonConvert.SerializeObject(selectedLeague), Encoding.UTF8, "application/json"));
    }

    void SaveRow(League selectedLeague)
    {
        leaguesGrid.UpdateRow(selectedLeague);
        leagueNameBeforeEdit = "";
    }

    void CancelEdit(League selectedLeague)
    {
        leaguesGrid.CancelEditRow(selectedLeague);
        selectedLeague.Name = leagueNameBeforeEdit;
        leagueNameBeforeEdit = "";
    }

    async Task DeleteRow(League selectedLeague)
    {
        await Http.PostAsync("api/League/DeleteLeague", new StringContent(JsonConvert.SerializeObject(selectedLeague), Encoding.UTF8, "application/json"));
        await RefreshTable();
    }

    void InsertRow()
    {
        leaguesGrid.InsertRow(new League());
    }

    async Task OnCreateRow(League selectedLeague)
    {
        await Http.PostAsync("api/League/CreateLeague", new StringContent(JsonConvert.SerializeObject(selectedLeague), Encoding.UTF8, "application/json"));
        await RefreshTable();
    }

    async Task RefreshTable()
    {
        leagues = await Http.GetFromJsonAsync<IList<League>>("api/League/GetAllLeagues");
        await leaguesGrid.Reload();
    }
}
